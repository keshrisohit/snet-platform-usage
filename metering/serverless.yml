

plugins:
  - serverless-offline

service: metering

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage,'dev'}
  timeout: 30
  description: Metering service entrypoints # optional, Description to publish to AWS
  memorySize: 128
  deploymentBucket:
    name: com.serverless.${self:provider.stage}.deploys # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: metering
  deploymentPrefix: serverless # The S3 prefix under which deployed artifacts should be stored. Default is serverless

custom:
  stages:
    - dev
    - ropsten
    - mainnet
  origin:
    local: localhost
    ropsten: '*'
    mainnet:  'snet.com'


package:
  include:
  exclude:
    - tests/**
    - .gitignore

functions:
  get-freecalls:
    handler: handler.hello

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: handlers/freecall_handler
          method: get
          authorizer:
            name: user-authorizer
            type: COGNITO_USER_POOLS
            arn: ${file(./config.${self:provider.stage}.json):AUTHORIZER}
            identitySource: method.request.header.Authorization
          cors:
            origin: ${self:custom.origin.${self:provider.stage}}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-requested-with
